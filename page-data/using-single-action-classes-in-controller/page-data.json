{"componentChunkName":"component---src-templates-blog-post-js","path":"/using-single-action-classes-in-controller/","webpackCompilationHash":"74e08bd1f829f53045fc","result":{"data":{"site":{"siteMetadata":{"title":"Codycrunch","author":"NicoAudy"}},"markdownRemark":{"id":"bf02ee2d-f0c8-5610-8fa2-d875573a6a80","html":"<hr>\n<p>One solution I have found is using invokable classes, using the magic method <code class=\"language-text\">__invoke()</code>. By creating a single action class, I have to write only <code class=\"language-text\">__constructor()</code> and <code class=\"language-text\">__invoke()</code> method to perform a single action.</p>\n<p><code class=\"language-text\">__invoke()</code> is a PHP magic function and when we will create an instance of the class or call this class <code class=\"language-text\">__invoke()</code> will be loaded automatically. By using this approach, we are also following SRP (<code class=\"language-text\">Single Responsibility Principle</code>). SRP means any class should have one reason to change. This makes our application more robust and testable and you donâ€™t have to inject every dependency for every method and can return the response needed.</p>\n<p>So for my MovieController, I can split them into SearchMovieController, LoadMovieImagesController, UploadMovieImagesController and so on. You can see all these names now become more descriptive and we know they only have one action to perform using <code class=\"language-text\">__invoke()</code> method.</p>\n<p>Now my routes will become from:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'searchMovie'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'MovieController@searchMovie'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'loadMoviesImages'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'MovieController@loadMovieImages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'searchMovie'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'SearchMovieController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'loadMoviesImages'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'LoadMovieImagesController'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, SearchMovieController will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SearchMovieController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do movie search here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above example is perfectly fine for using a single action class based controller to keep code clean and DRY, but there are some limitations of this approach.</p>","timeToRead":1,"frontmatter":{"title":"Using Single Action Classes in Controller","date":"April 04, 2019","spoiler":"Writing logic in your controller is perfectly fine when you know you have only one endpoint."},"fields":{"slug":"/using-single-action-classes-in-controller/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/using-single-action-classes-in-controller/","previous":{"fields":{"slug":"/how-to-fix-mysql-denied-for-user-root-localhost/","langKey":"en","directoryName":"how-to-fix-mysql-denied-for-user-root-localhost","maybeAbsoluteLinks":[]},"frontmatter":{"title":"How To Fix MySQL Denied For User Root Localhost"}},"next":{"fields":{"slug":"/laravel-trick/","langKey":"en","directoryName":"laravel-trick","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Laravel Tricks"}},"translations":[],"translatedLinks":[]}}}